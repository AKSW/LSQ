

        // Try to start - if something goes wrong print help
        // TODO Logic for Fwhen help is displayed could be improved
        //System.out.println("aoeuaoeuoaeu%2Fnstaeouhaoet%xx".replaceAll("\\%..", "-"));

//    	QueryExecution xxx = org.apache.jena.query.QueryExecutionFactory.sparqlService("http://localhost:8890/sparql", "select * { ?s ?p ?o }");
//    	xxx.setTimeout(1, 1);
//    	ResultSetFormatter.consume(xxx.execSelect());

    /**
     * RDFize Log
     * @param queryToSubmissions A map which store a query string (single line) as key and all the corresponding submissions as List. Where a submission is a combination
     * of User encrypted ip and the data,time of the query request. The I.P and the time is separated by a separator
     * @param publicEndpoint Public endpoint of the log
     * @param graph named Graph, can be null
     * @param outputFile The output RDF file
     * @param separator Submission separator. Explained above
     * @param acronym A Short acronym of the dataset log, e.g., DBpedia or SWDF
     * @param processor
     * @param ram
     * @param endpointVersion
     * @param ep
     * @param curTime
     * @throws IOException
     * @throws RepositoryException
     * @throws MalformedQueryException
     * @throws QueryEvaluationException
     * @throws ParseException
     */
    public static void rdfizeQueryExecutionOld(
            //OutputStream out,
            //Resource generatorRes,
            //NestedResource baseRes,
            Resource queryRes,
            Function<String, NestedResource> nsToBaseRes,
            Query query,
            //Map<String, Set<String>> queryToSubmissions,
            QueryExecutionFactory dataQef) {
            //String separator,
            //String localEndpoint, // TODO get rid of argument, and use dataQef for executing queries instead
            //String graph, // TODO get rid of argument, and use dataQef for executing queries instead
            //String acronym)  {

        logger.info("RDFization started...");
        long endpointSize = ServiceUtils.fetchInteger(dataQef.createQueryExecution("SELECT (COUNT(*) AS ?x) { ?s ?p ?o }"), Vars.x);


        // endpointSize = Selectivity.getEndpointTotalTriples(localEndpoint,
        // graph);
        long parseErrorCount = 0;

        // this.writePrefixes(acronym);
        // Resource executionRes =
        // model.createResource(lsqr:le-"+acronym+"-q"+queryHash);

        //for (String queryStr : queryToSubmissions.keySet()) {

        Model model = ModelFactory.createDefaultModel();

        // TODO The issue is that we want to have different 'classifiers' for a certain resource
        // e.g. node1235, way123, relation123, query123, etc
        //
        //model.createResource(LSQ.defaultLsqrNs + "le-" + datasetLabel + "-q" + queryHash);

        Resource localExecutionRes = nsToBaseRes.apply("le-").get();
        Resource remoteExecutionRes = nsToBaseRes.apply("re-").get();

        //Resource queryRes = nsToBaseRes.apply("").get();

        //Resource remoteExecutionRes = model.createResource(LSQ.defaultLsqrNs + "re-" + datasetLabel + "-q" + queryHash);
        String queryStr = query.toString();

        queryRes
            //.addProperty(PROV.wasGeneratedBy, baseRes.get())
            .addProperty(LSQ.text, queryStr.trim())
            .addProperty(LSQ.hasLocalExec, localExecutionRes)
            .addProperty(LSQ.hasRemoteExec, remoteExecutionRes);

// TODO runtime
//        localExecutionRes
//            .addLiteral(LSQ.runTimeMs, );

        //rdfizeQuery(new NestedResource(queryRes), query);

                    //queryStats = queryStats+"\nlsqr:q"+queryHash+" lsqv:hasLocalExecution lsqr:le-"+acronym+"-q"+queryHash+" . " ;

//            System.out.println(queryNo + " Started...");
//

//            try {
//                if (query.isDescribeType()) {
////                    this.RDFizeDescribe(query, localEndpoint, graph,
////                            queryToSubmissions.get(queryStr), separator);
//                } else if (query.isSelectType()) {
//                    //this.rdfizeQuery(model, itemRes, query, dataQef, queryToSubmissions.get(queryStr), separator);
//                } else if (query.isAskType()) {
////                    this.RDFizeASK(query, localEndpoint, graph,
////                            queryToSubmissions.get(queryStr), separator);
//                } else if (query.isConstructType()) {
////                    this.RDFizeConstruct(query, localEndpoint, graph,
////                            queryToSubmissions.get(queryStr), separator);
//                }
//            } catch (Exception ex) {
//                throw new RuntimeException("Unhandled exception: ", ex);
//            }


            //model.write(System.out, "TURTLE");



            //RDFDataMgr.write(out, model, RDFFormat.NTRIPLES);
//        }

        // TODO Track and report parse and execution errors
//        logger.info("Total Number of Queries with Parse Errors: "
//                + parseErrorCount);
//        logger.info("Total Number of Queries with Runtime Errors: "
//                + runtimeErrorCount);
    }



    // QueryExecutionFactory dataQef



//  public static final PrefixMapping lsqPrefixes;
//
//  static {
//      try {
//          ClassPathResource r = new ClassPathResource("lsq-prefixes.ttl");
//          Model m = ModelFactory.createDefaultModel();
//          m.read(r.getInputStream(), "http://example.org/base/", "turtle");
//          lsqPrefixes = m;
//      } catch(Exception e) {
//          throw new RuntimeException(e);
//      }
//  }
