{"name":"LSQ","tagline":"The Linked SPARQL Queries Dataset","body":"### LSQ\r\nA Linked Dataset describing SPARQL queries extracted from the logs of a variety of prominent public SPARQL endpoints. We argue that this dataset has a variety of uses for the SPARQL research community, be it, for example, to generate benchmarks on-the-fly by selecting real-world queries with specific characteristics that we describe, or to conduct analysis of what SPARQL (1.1) query features are most often used to interrogate endpoints, or to characterize the behavior of the different types of agents that are using these endpoints, or to find out what queries agents are asking about a given resource, etc. \r\n\r\n### SPARQL Endpoint\r\nLSQ [SPARQL endpoint](http://titan.informatik.uni-leipzig.de:3333/sparql) is available online. Currently, we have RDFized query logs of DBpedia3.5.1, Linked Geo Data, Semantic Web Dog Food, and British Museum. If you want to query for a particular query log you can specify the following named graphs. \r\n* DBpedia: http://dbpedia.org\r\n* Linked Geo Data: http://linkedgeodata.org\r\n* Semantic Web Dog Food: http://data.semanticweb.org\r\n* British Museum: http://bm.rkbexplorer.com\r\n\r\nA list of example queries can be found at the bottom of this page. \r\n\r\n### Datadumps\r\nThe LSQ [DBpedia](https://drive.google.com/file/d/0B1tUDhWNTjO-ejZId2JmRTdVaG8/view?usp=sharing)\r\n, [Linked Geo Data](https://drive.google.com/file/d/0B1tUDhWNTjO-cEN1QkNUZWJkV1k/view?usp=sharing)\r\n,[Semantic Web Dog Food](https://drive.google.com/file/d/0B1tUDhWNTjO-MFJzR284a04tN00/view?usp=sharing)\r\n, and [British Museum](https://drive.google.com/file/d/0B1tUDhWNTjO-UGhDTWx5U1EyWTg/view?usp=sharing) datadumps are available online in turtle format.\r\n\r\n### Datahub Entry\r\nLSQ is [available](http://datahub.io/dataset/lsq) at datahub as well.  \r\n\r\n### Void Statistics\r\nOur SPARQL endpoint directly provides the Void statistics for each of the query log. Below are the named graphs for Void. You may directly clicke on the named graphs to see the Void statistics on-th-fly. \r\n* DBpedia: [http://dbpedia.org/void](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=CONSTRUCT+%7B%3Fs+%3Fp+%3Fo%7D+FROM+%3Chttp%3A%2F%2Fdbpedia.org%2Fvoid%3E%0D%0AWHERE%0D%0A%7B%0D%0A%3Fs+%3Fp+%3Fo%0D%0A%7D&format=text%2Fturtle&timeout=0&debug=on)\r\n* Linked Geo Data: [http://linkedgeodata.org/void](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=CONSTRUCT+%7B%3Fs+%3Fp+%3Fo%7D+FROM+%3Chttp%3A%2F%2Fdlinkedgeodata.org%2Fvoid%3E%0D%0AWHERE%0D%0A%7B%0D%0A%3Fs+%3Fp+%3Fo%0D%0A%7D&format=text%2Fturtle&timeout=0&debug=on)\r\n* Semantic Web Dog Food: [http://data.semanticweb.org/void](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=CONSTRUCT+%7B%3Fs+%3Fp+%3Fo%7D+FROM+%3Chttp%3A%2F%2Fdata.semanticweb.org%2Fvoid%3E%0D%0AWHERE%0D%0A%7B%0D%0A%3Fs+%3Fp+%3Fo%0D%0A%7D&format=text%2Fturtle&timeout=0&debug=on)\r\n* British Museum: [http://bm.rkbexplorer.com/void](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=CONSTRUCT+%7B%3Fs+%3Fp+%3Fo%7D+FROM+%3Chttp%3A%2F%2Fbm.rkbexplorer.com%2Fvoid%3E%0D%0AWHERE%0D%0A%7B%0D%0A%3Fs+%3Fp+%3Fo%0D%0A%7D&format=text%2Fturtle&timeout=0&debug=on)\r\n\r\nAn example query to get DBpedia Void is given below \r\n```\r\nSELECT * FROM <http://dbpedia.org/void>\r\nWHERE {?s ?p ?o}\r\n```\r\n\r\nThe output can be seen [here](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=SELECT+*+FROM+%3Chttp%3A%2F%2Fdbpedia.org%2Fvoid%3E%0D%0AWHERE+%7B%3Fs+%3Fp+%3Fo%7D&format=text%2Fhtml&timeout=0&debug=on)\r\n### Schema Diagram\r\n![LSQL Schema Diagram](https://sites.google.com/site/saleemsweb/home/LinkedSQL_Schema_V5.png)\r\n\r\n### Source Code\r\nLSQ is open source. You can checkout the source code from [LSQ Github](https://github.com/AKSW/LSQ.git). You want to RDFize your own query log, you may use the following. \r\n\r\n```\r\nPackage: org.aksw.simba.dataset.lsq\r\n\r\nClass: LogRDFizer\r\n```\r\n\r\n### Example SPARQL Queries\r\nHere is few of the example SPARQL queries. \r\n```\r\n---Get custom benchmark of 50 queries having result size greater than 10 and triple patterns less\r\nthan 5 and query execution time less than 50(ms). Also the quereis must contains SPARQL FILTER---\r\n\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT ?query  FROM <http://data.semanticweb.org>\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:resultSize ?resultSize .\r\n    ?id lsqv:triplePatterns ?triplePatterns .\r\n    ?id lsqv:runTimeMs ?runTime .\r\n    ?id lsqv:usesFeature lsqv:Filter . \r\n   FILTER (?resultSize > 10 && ?triplePatterns <5  && ?runTime < 50 ) \r\n}\r\nLIMIT 50\r\n\r\n---The number of queries containing UNION--- \r\nPREFIX lsqv: <http://lsq.aksw.org/vocab#>\r\nSELECT COUNT(?queryId) AS ?UnionCount\r\nWHERE {    ?queryId  lsqv:usesFeature lsqv:Union . }\r\n  \r\n---The number of queries of Star type---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nSELECT COUNT(?id) AS ?TotalStarQueries\r\nWHERE {\r\n?id lsqv:joinVertex  ?joinVertex . \r\n?joinVertex lsqv:joinVertexType lsqv:Star .\r\n} \r\n\r\n---Get top query executions for smaller result set queries---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT DISTINCT ?id COUNT (?executions) AS ?executionsCount\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:resultSize ?resultSize .\r\n    ?id lsqv:execution ?executions. \r\n   FILTER (?resultSize <100)\r\n}\r\n  ORDER BY DESC(COUNT(?executions))\r\n\r\n---How an agent tried to correct queries with parse errors?---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX lsqr:<http://lsq.aksw.org/res/>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nPREFIX dct:<http://purl.org/dc/terms/>  \r\nSELECT   ?query ?time \r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:parseError ?error .\r\n    ?id lsqv:execution ?executions. \r\n    ?executions dct:issued  ?time .\r\n    ?executions lsqv:agent lsqr:A-WlFJE0QQRlhBVRNGRx1QGVdaRhNsN2YUW15R\r\n}\r\n\r\n---Get average of the different SPARQL query features from DBpedia query log---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#> \r\nSELECT AVG(?resultSize) AS ?resultSizeAvg AVG(?bgps) AS ?bgpsAvg \r\nAVG(?triplePatterns) AS ?triplePatternsAvg AVG(?joinVertices) AS ?joinVerticesAvg\r\nAVG(?meanJoinVerticesDegree) AS ?meanJoinVerticesDegreeAvg\r\nAVG(?meanTriplePatternSelectivity) AS ?meanTriplePatternSelectivityAvg\r\nAVG(?runTime) AS ?runTimeAvg FROM <http://dbpedia.org>\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:resultSize ?resultSize .\r\n    ?id lsqv:bgps ?bgps.\r\n    ?id lsqv:triplePatterns ?triplePatterns .\r\n    ?id lsqv:joinVertices ?joinVertices .\r\n    ?id lsqv:meanJoinVerticesDegree   ?meanJoinVerticesDegree .\r\n    ?id lsqv:meanTriplePatternSelectivity ?meanTriplePatternSelectivity .\r\n    ?id lsqv:runTimeMs ?runTime .\r\n}\r\n\r\n---Top queries by number of executions---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT DISTINCT ?id COUNT (?executions) AS ?executionsCount\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:execution ?executions.   \r\n}\r\n  ORDER BY DESC(COUNT(?executions))\r\n\r\n---All queries which talk about Michael Jackson---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT  DISTINCT  ?object\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:mentionsPredicate <http://xmlns.com/foaf/0.1/name> .\r\n    ?id lsqv:mentionsObject <http://dbpedia.org/ontology/Michael_Jackson> \r\n}\r\n---Top agents by number of execution---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT DISTINCT ?agent COUNT (?executions) AS ?executionsCount\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:execution ?executions .\r\n    ?executions lsqv:agent  ?agent.  \r\n     }\r\n  ORDER BY DESC(COUNT(?executions))\r\n```\r\n\r\n\r\n### Issue Tracker and Mailing List\r\nIf you notice any issue, you may use LSQ [issue tracker](https://github.com/AKSW/LSQ/issues). Alternatively, you can contact any of the LSQ team member. We would be more than happy to reply as soon as possible. You may also use LSQ Google [mailing list](https://groups.google.com/forum/#!forum/public-lsq) for further discussion and suggestions. \r\n\r\n### LSQ Team\r\n* [Muhammad Saleem](https://sites.google.com/site/saleemsweb/) (Maintainer) \r\n* [Intizar Ali](http://www.intizarali.org)\r\n* [Qaiser Mehmood](https://www.insight-centre.org/users/qaiser-mehmood)\r\n* [Aidan Hogan](http://aidanhogan.com/)\r\n* [Axel-Cyrille Ngonga Ngomo](http://aksw.org/AxelNgonga.html)\r\n\r\nWe are very thankful to Richard Cyganiak (TopQuadrant), Jens Lehmann (AKSW, Uni. Leipzig), Dimitris Kontokostas (AKSW, Uni. Leipzig), Ivan Ermilov (AKSW, Uni. Leipzig), and Hugh Glaser (Ethos VO Ltd) for providing query logs.","google":"UA-45389218-8","note":"Don't delete this file! It's used internally to help with page regeneration."}