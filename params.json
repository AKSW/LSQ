{"name":"LSQ","tagline":"The Linked SPARQL Queries Dataset","body":"### LSQ\r\nA Linked Dataset describing SPARQL queries extracted from the logs of a variety of prominent public SPARQL endpoints. We argue that this dataset has a variety of uses for the SPARQL research community, be it, for example, to generate benchmarks on-the-fly by selecting real-world queries with specific characteristics that we describe, or to conduct analysis of what SPARQL (1.1) query features are most often used to interrogate endpoints, or to characterize the behavior of the different types of agents that are using these endpoints, or to find out what queries agents are asking about a given resource, etc. \r\n\r\n### Full PDF Version of LSQ\r\nA full version (explaining the complete details) of the LSQ can be downloaded from [here](https://goo.gl/uu32hi)\r\n\r\n### SPARQL Endpoint\r\nLSQ [SPARQL endpoint](http://titan.informatik.uni-leipzig.de:3333/sparql) is available online. Currently, we have RDFized query logs of DBpedia3.5.1, Linked Geo Data, Semantic Web Dog Food, and British Museum. If you want to query for a particular query log you can specify the following named graphs. \r\n* DBpedia: http://dbpedia.org\r\n* Linked Geo Data: http://linkedgeodata.org\r\n* Semantic Web Dog Food: http://data.semanticweb.org\r\n* British Museum: http://bm.rkbexplorer.com\r\n\r\nA list of example queries can be found at the bottom of this page. \r\n\r\n### Datadumps\r\nThe LSQ [DBpedia](https://drive.google.com/file/d/0B1tUDhWNTjO-ejZId2JmRTdVaG8/view?usp=sharing)\r\n, [Linked Geo Data](https://drive.google.com/file/d/0B1tUDhWNTjO-cEN1QkNUZWJkV1k/view?usp=sharing)\r\n,[Semantic Web Dog Food](https://drive.google.com/file/d/0B1tUDhWNTjO-MFJzR284a04tN00/view?usp=sharing)\r\n, and [British Museum](https://drive.google.com/file/d/0B1tUDhWNTjO-UGhDTWx5U1EyWTg/view?usp=sharing) datadumps are available online in turtle format.\r\n\r\n### Do You Want Your Own Local SPARQL Endpoint?\r\nWe can download the Virtuoso7.1 endpoints both for [Windows](https://drive.google.com/file/d/0B1tUDhWNTjO-eE8xTjVEZ2tRUUE/view?usp=sharing) and [Linux](https://drive.google.com/file/d/0B1tUDhWNTjO-Sk8td1U1ME9nTE0/view?usp=sharing). Start-up information is given below. \r\n\r\n```\r\nFor Windows go to bin folder and click on start.bat file. \r\nA virtuoso instance of the LSQ will be started at http://localhost:8890/sparql. \r\n\r\nFor Linux go to bin folder and execute\r\n$ ./start_virtuoso.sh\r\n``` \r\n\r\n### Datahub Entry\r\nLSQ is [available](http://datahub.io/dataset/lsq) at datahub as well.  \r\n\r\n### Void Statistics\r\nOur SPARQL endpoint directly provides the Void statistics for each of the query log. Below are the named graphs for Void. You may directly clicke on the named graphs to see the Void statistics on-th-fly. \r\n* DBpedia: [http://dbpedia.org/void](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=CONSTRUCT+%7B%3Fs+%3Fp+%3Fo%7D+FROM+%3Chttp%3A%2F%2Fdbpedia.org%2Fvoid%3E%0D%0AWHERE%0D%0A%7B%0D%0A%3Fs+%3Fp+%3Fo%0D%0A%7D&format=text%2Fturtle&timeout=0&debug=on)\r\n* Linked Geo Data: [http://linkedgeodata.org/void](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=CONSTRUCT+%7B%3Fs+%3Fp+%3Fo%7D+FROM+%3Chttp%3A%2F%2Flinkedgeodata.org%2Fvoid%3E%0D%0AWHERE%0D%0A%7B%0D%0A%3Fs+%3Fp+%3Fo%0D%0A%7D&format=text%2Fturtle&timeout=0&debug=on)\r\n* Semantic Web Dog Food: [http://data.semanticweb.org/void](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=CONSTRUCT+%7B%3Fs+%3Fp+%3Fo%7D+FROM+%3Chttp%3A%2F%2Fdata.semanticweb.org%2Fvoid%3E%0D%0AWHERE%0D%0A%7B%0D%0A%3Fs+%3Fp+%3Fo%0D%0A%7D&format=text%2Fturtle&timeout=0&debug=on)\r\n* British Museum: [http://bm.rkbexplorer.com/void](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=CONSTRUCT+%7B%3Fs+%3Fp+%3Fo%7D+FROM+%3Chttp%3A%2F%2Fbm.rkbexplorer.com%2Fvoid%3E%0D%0AWHERE%0D%0A%7B%0D%0A%3Fs+%3Fp+%3Fo%0D%0A%7D&format=text%2Fturtle&timeout=0&debug=on)\r\n\r\nAn example query to get DBpedia Void is given below \r\n```\r\nCONSTRUCT {?s ?p ?o} FROM <http://dbpedia.org/void>\r\nWHERE\r\n{\r\n?s ?p ?o\r\n}\r\nOR\r\nSELECT * FROM <http://dbpedia.org/void>\r\nWHERE {?s ?p ?o}\r\n```\r\n\r\nThe output of the SELECT query can be seen [here](http://titan.informatik.uni-leipzig.de:3333/sparql?default-graph-uri=&query=SELECT+*+FROM+%3Chttp%3A%2F%2Fdbpedia.org%2Fvoid%3E%0D%0AWHERE+%7B%3Fs+%3Fp+%3Fo%7D&format=text%2Fhtml&timeout=0&debug=on)\r\n### Schema Diagram\r\n![LSQL Schema Diagram](https://sites.google.com/site/saleemsweb/home/LinkedSQL_Schema_V5.png)\r\n\r\n### Source Code\r\nLSQ is open source. You can checkout the source code from [LSQ Github](https://github.com/AKSW/LSQ.git). You want to RDFize your own query log, you may use the following. \r\n\r\n```\r\nPackage: org.aksw.simba.dataset.lsq\r\n\r\nClass: LogRDFizer\r\n```\r\n### Use Cases\r\nWe wish to provide some concrete queries (relevant to the use cases discussed in paper) that can be issued against the LSQ SPARQL endpoint\r\n\r\n####UC1 Facilitating Benchmark Generation\r\nLinked SQ can help users generate custom benchmarks by selecting real-world queries meeting certain criteria. The query given below is an example SPARQL query over LSQ that provides a list of 50 queries with additional parameters set for both structural and data-driven criteria useful for creating custom benchmarks. \r\n\r\n```\r\nPREFIX lsqv: <http://lsq.aksw.org/vocab#>\r\nPREFIX sp: <http://spinrdf.org/sp#>\r\nSELECT ?query  FROM <http://data.semanticweb.org>\r\n WHERE {\r\n    ?id sp:text ?query ; lsqv:resultSize ?rs ; lsqv:triplePatterns ?tp ;\r\n        lsqv:runTimeMs ?rt ; lsqv:usesFeature lsqv:Filter . \r\n   FILTER (?rs > 10 && ?tp <5  && ?rt < 50 ) }\r\nLIMIT 50\r\n```\r\n####UC2 SPARQL Adoption\r\nThe Linked SQ dataset can also be used to gain insights into how the SPARQL query language is being used in practice, be that to find out how features are used and combined or to see, for example, what kinds of joins are most common. Below are the two example queries. \r\n\r\n```\r\n----The number of queries using both UNION and FILTER----\r\nPREFIX lsqv: <http://lsq.aksw.org/vocab#>\r\nSELECT COUNT(?queryId) AS ?unionFilterCount\r\nWHERE {  ?queryId  lsqv:usesFeature lsqv:Union , lsqv:Filter . }\r\n\r\n----The number of empty-result queries with path joins----\r\nPREFIX lsqv: <http://lsq.aksw.org/vocab#>\r\nSELECT COUNT(?id) AS ?starQueries\r\nWHERE {\r\n  ?id lsqv:joinVertex  ?joinVertex ; lsqv:resultSize 0 . \r\n  ?joinVertex lsqv:joinVertexType lsqv:Path . } \r\n```\r\n####UC3 Caching\r\nThe Linked SQ dataset can also be used to find useful patterns to cache, commonly repeated queries, or to create realistic caching benchmarks using the timestamp of execution times. Query given below gives an example of an LSQ query that finds the most frequently executed queries that take a long time to compute but have small result sizes that can be cheaply cached.\r\n```\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT DISTINCT ?query COUNT(?exs) AS ?exsCount\r\n WHERE {\r\n    ?id sp:text ?query ; lsqv:resultSize ?rs ; lsqv:execution ?exs ; lsqv:runTimeMs ?rt . \r\n    FILTER (?rs < 100 && ?rt > 10000)}\r\n  GROUP BY ?query ORDER BY DESC(COUNT(?exsCount))\r\n```\r\n####UC4 Usability\r\nFrom the Linked SQ Dataset, one can derive a list of queries that resulted in parse errors, runtime errors, or empty results. One can also look at which agents issued such queries, and how their queries evolved over time. Query given below gives a small example of a query looking for parse errors encountered by a given agent, ordered by time.\r\n```\r\nPREFIX lsqv: <http://lsq.aksw.org/vocab#>\r\nPREFIX lsqr: <http://lsq.aksw.org/res/>\r\nPREFIX sp: <http://spinrdf.org/sp#>\r\nPREFIX dct: <http://purl.org/dc/terms/>  \r\nSELECT ?query ?time ?error\r\n WHERE {\r\n    ?id sp:text ?query ; lsqv:parseError ?error ; lsqv:execution ?ex . \r\n    ?ex dct:issued ?time ; \r\n        lsqv:agent lsqr:A-WlFJE0QQRlhBVRNGRx1QGVdaRhNsN2YUW15R .\r\n }\r\nORDER BY ?time\r\n```\r\n\r\n####UC5 Optimisation\r\nGiven a particular workload of queries, an optimiser can decide how to configure indexes, etc., to improve the performance of typical queries. Administrators can use LSQ to derive some default statistics for what is most common across different databases. For example, the query given below provides a query to see how frequently queries containing paths return zero results, which may motivate optimisations to pre-filter empty paths; one could consider a similar example to find path queries that take the longest time, which may suggest to materialise indexes for specific paths.\r\n```\r\nPREFIX lsqv: <http://lsq.aksw.org/vocab#>\r\nSELECT COUNT(?id) AS ?starQueries\r\nWHERE {\r\n  ?id lsqv:joinVertex  ?joinVertex ; lsqv:resultSize 0 . \r\n  ?joinVertex lsqv:joinVertexType lsqv:Path .\r\n    } \r\n```\r\n####UC6 Meta-querying\r\nThe final example query given below shows how one can find all the queries relating to a given resource, in this case Michael Jackson.\r\n```\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT  DISTINCT  ?query\r\n WHERE {\r\n    ?id sp:text ?query . \r\n    { ?id lsqv:mentionsSubject <http://dbpedia.org/ontology/Michael_Jackson> }\r\n    UNION\r\n    { ?id lsqv:mentionsObject <http://dbpedia.org/ontology/Michael_Jackson> } \r\n }\r\n```\r\n### Some Other Examples\r\nHere are few of the SPARQL queries that might be interesting\r\n```\r\n---How an agent tried to correct queries with parse errors?---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX lsqr:<http://lsq.aksw.org/res/>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nPREFIX dct:<http://purl.org/dc/terms/>  \r\nSELECT   ?query ?time \r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:parseError ?error .\r\n    ?id lsqv:execution ?executions. \r\n    ?executions dct:issued  ?time .\r\n    ?executions lsqv:agent lsqr:A-WlFJE0QQRlhBVRNGRx1QGVdaRhNsN2YUW15R\r\n}\r\n\r\n---Get average of the different SPARQL query features from DBpedia query log---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#> \r\nSELECT AVG(?resultSize) AS ?resultSizeAvg AVG(?bgps) AS ?bgpsAvg \r\nAVG(?triplePatterns) AS ?triplePatternsAvg AVG(?joinVertices) AS ?joinVerticesAvg\r\nAVG(?meanJoinVerticesDegree) AS ?meanJoinVerticesDegreeAvg\r\nAVG(?meanTriplePatternSelectivity) AS ?meanTriplePatternSelectivityAvg\r\nAVG(?runTime) AS ?runTimeAvg FROM <http://dbpedia.org>\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:resultSize ?resultSize .\r\n    ?id lsqv:bgps ?bgps.\r\n    ?id lsqv:triplePatterns ?triplePatterns .\r\n    ?id lsqv:joinVertices ?joinVertices .\r\n    ?id lsqv:meanJoinVerticesDegree   ?meanJoinVerticesDegree .\r\n    ?id lsqv:meanTriplePatternSelectivity ?meanTriplePatternSelectivity .\r\n    ?id lsqv:runTimeMs ?runTime .\r\n}\r\n\r\n---Top queries by number of executions---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT DISTINCT ?id COUNT (?executions) AS ?executionsCount\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:execution ?executions.   \r\n}\r\n  ORDER BY DESC(COUNT(?executions))\r\n\r\n---Top agents by number of execution---\r\nPREFIX lsqv:<http://lsq.aksw.org/vocab#>\r\nPREFIX sp:<http://spinrdf.org/sp#>\r\nSELECT DISTINCT ?agent COUNT (?executions) AS ?executionsCount\r\n WHERE {\r\n    ?id sp:text ?query .\r\n    ?id lsqv:execution ?executions .\r\n    ?executions lsqv:agent  ?agent.  \r\n     }\r\n  ORDER BY DESC(COUNT(?executions))\r\n```\r\n### Sample RDF Representation \r\nA sample RDF representation of a query is given below. \r\n```\r\n@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .\r\n@prefix lsqr: <http://lsq.aksw.org/res/> . \r\n@prefix lsqrd: <http://lsq.aksw.org/res/SWDF-> . \r\n@prefix lsqv: <http://lsq.aksw.org/vocab#> . \r\n@prefix sp: <http://spinrdf.org/sp#> . \r\n@prefix dct: <http://purl.org/dc/terms/> . \r\n@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .\r\n\r\n# QUERY INSTANCE META-DATA\r\nlsqrd:q483 lsqv:endpoint <http://data.semanticweb.org/sparql> ; \r\n  sp:text \"\"\"SELECT DISTINCT ?prop \r\n  WHERE { \r\n         ?obj rdf:type swdf:SessionEvent .    \r\n         ?obj ?prop ?targetObj .    \r\n         FILTER (isLiteral(?targetObj)) } \r\n         LIMIT 150\"\"\" . \r\n\r\n# STRUCTURAL META-DATA         \r\nlsqrd:q483 lsqv:bgps 1 ; lsqv:triplePatterns 2 ; lsqv:joinVertices 1 ; \r\n  lsqv:meanJoinVerticesDegree 2.0 ;  \r\n  lsqv:usesFeature  lsqv:Filter , lsqv:Distinct , lsqv:Limit ;       \r\n  lsqv:mentionsSubject \"?obj\" ;\r\n  lsqv:mentionsPredicate \"?prop\" , rdf:type ;\r\n  lsqv:mentionsObject \"?targetObj\" , swdf:SessionEvent ; \r\n  lsqv:joinVertex lsqr:q483-obj . \r\nlsqr:q483-obj lsqv:joinVertexDegree 2 ; lsqv:joinVertexType lsqv:Star .\r\n  \r\n# DATA-SENSITIVE META-DATA \r\nlsqrd:q483 lsqv:resultSize 16 ;  lsqv:runTimeMs 6 ;\r\n  lsqv:meanTriplePatternSelectivity 0.5007155695730322 ;\r\n\r\n# QUERY EXECUTION META-DATA\r\nlsqrd:q483 lsqv:execution lsqrd:q483-e1 , lsqrd:q483-e2 , lsqrd:q483-e3 , lsqrd:q483-e4 . \r\nlsqrd:q483-e1 lsqv:agent lsqr:A-WlxKE0QQRlhCUBdGRx1QGVRbQRNsN2YUWF5W  ; \r\n  dct:issued \"2014-05-22T17:08:17+01:00\"^^xsd:dateTimeStamp . \r\nlsqrd:q483-e2 lsqv:agent lsqr:A-WlxKE0QQRlhCUBdGRx1QGVRdRBNsN2YUW1pS  ; \r\n  dct:issued \"2014-05-20T14:34:35+01:00\"^^xsd:dateTimeStamp . \r\nlsqrd:q483-e3 lsqv:agent lsqr:A-WlxKE0QQRlhCUBdGRx1QGVRdRBNsN2YUW1pS  ; \r\n  dct:issued \"2014-05-20T14:28:37+01:00\"^^xsd:dateTimeStamp . \r\nlsqrd:q483-e4 lsqv:agent lsqr:A-WlxKE0QQRlhCUBdGRx1QGVRdRBNsN2YUW1pS  ; \r\n  dct:issued \"2014-05-20T14:24:13+01:00\"^^xsd:dateTimeStamp . \r\n\r\n# SPIN REPRESENTATION \r\nlsqrd:q483   a sp:Select ;\r\n  sp:distinct true ; sp:limit \"150\"^^xsd:long ;\r\n  sp:resultVariables ( [ sp:varName  \"prop\"^^xsd:string ] ) ;\r\n  sp:where ( \r\n     [ sp:subject [ sp:varName  \"obj\"^^xsd:string ] ;\r\n       sp:predicate  rdf:type ;\r\n       sp:object <http://data.semanticweb.org/ns/swc/ontology#SessionEvent>\r\n     ]  \r\n     [ sp:subject    [ sp:varName  \"obj\"^^xsd:string ] ;\r\n       sp:predicate  [ sp:varName  \"prop\"^^xsd:string ] ;\r\n       sp:object  [ sp:varName  \"targetObj\"^^xsd:string ] \r\n     ] \r\n     [ a sp:Filter ;\r\n       sp:expression  [ a sp:isLiteral ; sp:arg1 [ sp:varName  \"targetObj\"^^xsd:string ] ]\r\n     ]\r\n ) .\r\n```\r\n### Issue Tracker and Mailing List\r\nIf you notice any issue, you may use LSQ [issue tracker](https://github.com/AKSW/LSQ/issues). Alternatively, you can contact any of the LSQ team member. We would be more than happy to reply as soon as possible. You may also use LSQ Google [mailing list](https://groups.google.com/forum/#!forum/public-lsq) for further discussion and suggestions. \r\n\r\n### Query Logs Results\r\nOur complete query logs results (statistics about queries) can be downloaded [here](https://drive.google.com/file/d/0B1tUDhWNTjO-aW9RRllpcFFFejA/view?usp=sharing). Please refers to the LSQ paper for details. \r\n\r\n### How Can I Add My Queries?\r\nIf you have a query log, you may contact the maintainer of LSQ. In future, we are planning to provide an API for on-the-fly queries addition to our public endpoint. We are currently RDFizing Strabon and BioPortal queries logs and will be available soon. Stay tuned!. \r\n\r\n### LSQ Team\r\n* [Muhammad Saleem](https://sites.google.com/site/saleemsweb/) (Maintainer) \r\n* [Intizar Ali](http://www.intizarali.org)\r\n* [Qaiser Mehmood](https://www.insight-centre.org/users/qaiser-mehmood)\r\n* [Aidan Hogan](http://aidanhogan.com/)\r\n* [Axel-Cyrille Ngonga Ngomo](http://aksw.org/AxelNgonga.html)\r\n\r\nWe are very thankful to Richard Cyganiak (TopQuadrant), Jens Lehmann (AKSW, Uni. Leipzig), Dimitris Kontokostas (AKSW, Uni. Leipzig), Ivan Ermilov (AKSW, Uni. Leipzig), and Hugh Glaser (Ethos VO Ltd) for providing query logs.","google":"UA-45389218-8","note":"Don't delete this file! It's used internally to help with page regeneration."}